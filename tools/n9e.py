# Copyright (c) 2025 Kk
#
# This software is released under the MIT License.
# https://opensource.org/licenses/MIT

import os
import httpx
import time
from datetime import datetime, timedelta, timezone
from typing import Dict, Any
from dotenv import load_dotenv
from mcp.server.fastmcp import FastMCP

load_dotenv()

n9e_url = os.getenv("N9E_URL", "http://localhost")
n9e_username = os.getenv("N9E_USERNAME", "admin")
n9e_password = os.getenv("N9E_PASSWORD", "password")


def register_n9e_tools(mcp: FastMCP):
    """注册 N9E 工具到 MCP 实例"""

    @mcp.tool(
        description="List all alerts generated by Nightingale in the past number of seconds, minutes, hours, or days."
    )
    async def list_nightingale_alerts(duration: int) -> Dict[str, Any]:
        """
        Fetch alerts generated by Nightingale within the past `duration` minutes.

        Args:
            duration (int): Duration in minutes to look back from the current time.

        Returns:
            Dict[str, Any]: A JSON-decoded response containing alert history from Nightingale.
        """

        token = await auth_token()
        end = int(time.time())
        start = end - duration * 60
        headers = {"Authorization": f"Bearer {token}"}
        params = {
            "p": 1,  # page number
            "stime": start,
            "etime": end,
        }

        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{n9e_url}/api/n9e/alert-his-events/list",
                headers=headers,
                params=params,
            )
            response.raise_for_status()
            return response.json()


async def auth_token() -> str:
    """
    获取 N9E 的 auth token
    """
    url = f"{n9e_url}/api/n9e/auth/login"
    payload = {
        "username": n9e_username,
        "password": n9e_password,
    }
    headers = {
        "Content-Type": "application/json",
    }
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(url, json=payload, headers=headers)
            response.raise_for_status()
            data = response.json()
            if data.get("err") == "":
                return data.get("dat").get("access_token")
            else:
                return [f"Error: {data.get('err', 'Unknown error')}"]
        except Exception as e:
            return [f"Error fetching metrics: {str(e)}"]
